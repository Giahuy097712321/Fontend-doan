import React from 'react'
import TypeProduct from '../../components/TypeProduct/TypeProduct'
import {
  WapperTypeProduct,
  WrapperButtonMore,
  WrapperProducts,
  HomePageContainer,
  HeroSection,
  SectionTitle,
  FeaturesSection,
  FeatureCard,
  BannerSection,
  CategorySection,
  CategoryGrid
} from './style'
import SliderComponent from '../../components/SliderComponent/SliderComponent'
import slider1 from '../../assets/images/slider1.png'
import slider2 from '../../assets/images/slider2.png'
import slider3 from '../../assets/images/slider3.png'
import CardComponent from './../../components/CardComponent/CardComponent';
import { useQuery } from '@tanstack/react-query'
import * as ProductService from '../../services/ProductService'
import { useSelector } from 'react-redux';
import { useRef, useState } from 'react';
import { useEffect } from 'react';
import Loading from './../../components/LoadingComponent/Loading';
import { useDebounce } from './../../hooks/useDebounce';
import ButtonComponent from './../../components/ButtonComponent/ButtonComponent';
import { CrownOutlined, RocketOutlined, SafetyCertificateOutlined, CustomerServiceOutlined } from '@ant-design/icons';

const HomePage = () => {
  const searchProduct = useSelector((state) => state?.product?.search)
  const refSearch = useRef(false)
  const searchDebounce = useDebounce(searchProduct, 500)
  const [loading, setLoading] = useState(false)

  const [stateProducts, setStateProducts] = useState([])
  const [limit, setLimit] = useState(8)
  const [typeProducts, setTypeProducts] = useState([])

  // Ref ƒë·ªÉ scroll ƒë·∫øn ph·∫ßn s·∫£n ph·∫©m
  const productsSectionRef = useRef(null)

  const fetchProductAll = async (context) => {
    const limit = context?.queryKey && context?.queryKey[1]
    const search = context?.queryKey && context?.queryKey[2]
    const res = await ProductService.getAllProduct(search, limit)
    return res
  }

  const fetchAllTypeProduct = async () => {
    const res = await ProductService.getAllTypeProduct()
    if (res?.status === 'OK') {
      setTypeProducts(res.data)
    }
  }

  const { isLoading, data: products, isPreviousData } = useQuery({
    queryKey: ['products', limit, searchDebounce],
    queryFn: fetchProductAll,
    retry: 3,
    retryDelay: 1000,
    keepPreviousData: true,
  })

  useEffect(() => {
    fetchAllTypeProduct()
  }, [])

  // H√†m scroll ƒë·∫øn ph·∫ßn s·∫£n ph·∫©m
  const scrollToProducts = () => {
    if (productsSectionRef.current) {
      productsSectionRef.current.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      })
    }
  }

  const features = [
    {
      icon: <RocketOutlined />,
      title: "Giao h√†ng si√™u t·ªëc",
      description: "Mi·ªÖn ph√≠ giao h√†ng cho ƒë∆°n t·ª´ 500K"
    },
    {
      icon: <SafetyCertificateOutlined />,
      title: "B·∫£o h√†nh ch√≠nh h√£ng",
      description: "B·∫£o h√†nh 12-24 th√°ng to√†n qu·ªëc"
    },
    {
      icon: <CustomerServiceOutlined />,
      title: "H·ªó tr·ª£ 24/7",
      description: "ƒê·ªôi ng≈© CSKH chuy√™n nghi·ªáp"
    },
    {
      icon: <CrownOutlined />,
      title: "S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng",
      description: "Cam k·∫øt h√†ng ch√≠nh h√£ng 100%"
    }
  ]

  return (
    <Loading isLoading={isLoading || loading}>
      <HomePageContainer>
        {/* Hero Section v·ªõi Slider */}
        <HeroSection>
          <div className="slider-container">
            <SliderComponent arrImages={[slider1, slider2, slider3]} />
          </div>
        </HeroSection>

        {/* Danh m·ª•c s·∫£n ph·∫©m - ƒê√É ƒê∆Ø·ª¢C L√ÄM N·ªîI B·∫¨T */}
        <CategorySection>
          <SectionTitle>
            <span className="title-text">Danh M·ª•c S·∫£n Ph·∫©m</span>
            <div className="title-decoration"></div>
            <p className="title-subtext">Kh√°m ph√° c√°c danh m·ª•c s·∫£n ph·∫©m ƒëa d·∫°ng c·ªßa ch√∫ng t√¥i</p>
          </SectionTitle>
          <CategoryGrid>
            {typeProducts.map((item, index) => (
              <div className="category-item" key={item}>
                <div className="category-icon">
                  {index % 4 === 0 ? 'üè†' : index % 4 === 1 ? 'üîå' : index % 4 === 2 ? 'üì∫' : '‚ö°'}
                </div>
                <TypeProduct name={item} />
                <div className="category-hover">
                  <span>Xem s·∫£n ph·∫©m</span>
                </div>
              </div>
            ))}
          </CategoryGrid>
        </CategorySection>

        {/* Features Section */}
        <FeaturesSection>
          {features.map((feature, index) => (
            <FeatureCard key={index}>
              <div className="feature-icon">
                {feature.icon}
              </div>
              <div className="feature-content">
                <h3>{feature.title}</h3>
                <p>{feature.description}</p>
              </div>
            </FeatureCard>
          ))}
        </FeaturesSection>

        {/* Banner Section */}
        <BannerSection>
          <div className="banner-content">
            <h2>∆Øu ƒë√£i ƒë·∫∑c bi·ªát cu·ªëi nƒÉm</h2>
            <p>Gi·∫£m gi√° l√™n ƒë·∫øn 50% cho t·∫•t c·∫£ s·∫£n ph·∫©m ƒëi·ªán m√°y</p>
            <ButtonComponent
              textButton="Mua ngay"
              styleButton={{
                background: 'linear-gradient(135deg, #FF6B9D, #FF8E53)',
                border: 'none',
                color: 'white',
                padding: '12px 32px',
                borderRadius: '25px',
                fontWeight: '600',
                fontSize: '16px',
                marginTop: '20px'
              }}
              styleTextButton={{ color: 'white', fontWeight: '600' }}
              onClick={scrollToProducts} // TH√äM S·ª∞ KI·ªÜN CLICK
            />
          </div>
        </BannerSection>

        {/* S·∫£n ph·∫©m - TH√äM REF ƒê·ªÇ SCROLL */}
        <div className="products-section" ref={productsSectionRef}>
          <SectionTitle>
            <span className="title-text">S·∫£n Ph·∫©m N·ªïi B·∫≠t</span>
            <div className="title-decoration"></div>
          </SectionTitle>

          <WrapperProducts>
            {products?.data?.map((product) => (
              <CardComponent
                key={product._id}
                countInStock={product.countInStock}
                description={product.description}
                image={product.image}
                name={product.name}
                price={product.price}
                rating={product.rating}
                type={product.type}
                selled={product.selled}
                discount={product.discount}
                id={product._id}
              />
            ))}
          </WrapperProducts>

          {/* N√∫t xem th√™m - ƒê√É S·ª¨A L·ªñI */}
          {products?.data?.length > 0 && (
            <div className="load-more-section">
              <WrapperButtonMore
                textButton={isPreviousData ? 'ƒêang t·∫£i...' : "Xem th√™m s·∫£n ph·∫©m"}
                type="outline"
                styleButton={{
                  border: `2px solid ${products?.total === products?.data?.length ? '#ccc' : '#1890ff'}`,
                  width: '280px',
                  height: '48px',
                  borderRadius: '25px',
                  background: `${products?.total === products?.data?.length ? '#f5f5f5' : 'transparent'}`,
                  fontSize: '16px',
                  fontWeight: '600'
                }}
                disabled={products?.total === products?.data?.length || products?.totalPage === 1}
                styleTextButton={{
                  fontWeight: 600,
                  color: products?.total === products?.data?.length ? '#ccc' : '#1890ff'
                }}
                onClick={() => setLimit((prev) => prev + 8)}
              />
            </div>
          )}
        </div>

        {/* Kh√¥ng c√≥ s·∫£n ph·∫©m */}
        {!isLoading && products?.data?.length === 0 && (
          <div className="no-products">
            <div className="no-products-content">
              <h3>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p</h3>
              <p>H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c duy·ªát c√°c danh m·ª•c s·∫£n ph·∫©m</p>
            </div>
          </div>
        )}
      </HomePageContainer>
    </Loading>
  )
}

export default HomePage